# Form implementation generated from reading ui file 'maindv.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import mysql.connector
from mysql.connector import Error

from add_dv import Ui_MainWindow as AddUi_MainWindow  # Import the Add Service form
from edit_dv import Ui_MainWindow as EditUi_MainWindow  # Import the Edit Service form

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(798, 568)
        MainWindow.setStyleSheet("background-color: rgb(255, 160, 160);")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(150, 20, 521, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.label.setObjectName("label")
        self.btTimKiem = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btTimKiem.setGeometry(QtCore.QRect(520, 100, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btTimKiem.setFont(font)
        self.btTimKiem.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btTimKiem.setStyleSheet("background-color: rgb(255, 161, 243);")
        self.btTimKiem.setObjectName("btTimKiem")
        self.btSua = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btSua.setGeometry(QtCore.QRect(230, 460, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btSua.setFont(font)
        self.btSua.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btSua.setStyleSheet("background-color: rgb(255, 161, 243);")
        self.btSua.setObjectName("btSua")
        self.btThem = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btThem.setGeometry(QtCore.QRect(60, 460, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btThem.setFont(font)
        self.btThem.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btThem.setStyleSheet("background-color: rgb(255, 161, 243);")
        self.btThem.setObjectName("btThem")
        self.btThoat = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btThoat.setGeometry(QtCore.QRect(640, 460, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.btThoat.setFont(font)
        self.btThoat.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btThoat.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.btThoat.setStyleSheet("background-color: rgb(255, 161, 243);")
        self.btThoat.setObjectName("btThoat")
        self.btXoa = QtWidgets.QPushButton(parent=self.centralwidget)
        self.btXoa.setGeometry(QtCore.QRect(390, 460, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.btXoa.setFont(font)
        self.btXoa.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.btXoa.setStyleSheet("background-color: rgb(255, 161, 243);")
        self.btXoa.setObjectName("btXoa")
        self.txtTimKiem = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.txtTimKiem.setGeometry(QtCore.QRect(60, 100, 401, 31))
        self.txtTimKiem.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.txtTimKiem.setObjectName("txtTimKiem")
        self.tableWidget = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(60, 150, 701, 281))
        self.tableWidget.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.tableWidget.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(170, 255, 0))
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(170, 255, 0))
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(170, 255, 0))
        self.tableWidget.setHorizontalHeaderItem(4, item)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 798, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Load data from database
        self.load_data()
        self.btThem.clicked.connect(self.open_add_form)
        self.btSua.clicked.connect(self.open_edit_form)
        self.btThoat.clicked.connect(self.close_application)
        self.btXoa.clicked.connect(self.delete_record)
        self.btTimKiem.clicked.connect(self.search_data)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Danh Sách Dịch Vụ Khách Sạn"))
        self.btTimKiem.setText(_translate("MainWindow", "Tìm Kiếm "))
        self.btSua.setText(_translate("MainWindow", "Sửa"))
        self.btThem.setText(_translate("MainWindow", "Thêm"))
        self.btThoat.setText(_translate("MainWindow", "Thoát"))
        self.btXoa.setText(_translate("MainWindow", "Xoá"))
        self.txtTimKiem.setPlaceholderText(_translate("MainWindow", "Nhập thông tin cần tìm kiếm ....."))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID Dịch Vụ"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Tên"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Đơn vị tính"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Giá"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Mô tả"))

    def load_data(self):
        try:
            connection = mysql.connector.connect(
                host='localhost',
                user='root',
                password='phuc123',
                database='test_db'  # Tên cơ sở dữ liệu đã tạo
            )

            if connection.is_connected():
                cursor = connection.cursor()
                cursor.execute("SELECT * FROM DichVu")
                self.tableWidget.setRowCount(0)
                rows = cursor.fetchall()

                self.tableWidget.setRowCount(0)
                for row_number, row_data in enumerate(rows):
                    self.tableWidget.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                        self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

        except Error as e:
            print("Lỗi khi hiển thị dữ liệu", e)
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

    def open_add_form(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = AddUi_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()


    def open_edit_form(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = EditUi_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()


    def close_application(self):
        QtCore.QCoreApplication.instance().quit()

    def delete_record(self):
        selected_row = self.tableWidget.currentRow()
        if selected_row < 0:
            QtWidgets.QMessageBox.warning(self.centralwidget, "Warning", "Vui lòng chọn bản ghi để xóa !")
            return

        service_id = self.tableWidget.item(selected_row, 0).text()

        try:
            connection = mysql.connector.connect(
                host='localhost',
                user='root',
                password='phuc123',
                database='test_db'
            )
            if connection.is_connected():
                cursor = connection.cursor()
                query = "DELETE FROM DichVu WHERE MaDV = %s"
                cursor.execute(query, (service_id,))
                connection.commit()
                QtWidgets.QMessageBox.information(self.centralwidget, "Success", "Đã xóa thành công bản ghi.")
                self.load_data()

        except Error as e:
            QtWidgets.QMessageBox.critical(self.centralwidget, "Error", f"Không thể xóa bản ghi: {e}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

    def search_data(self):
        search_text = self.txtTimKiem.toPlainText().strip()

        if not search_text:
            self.load_data()
            return

        try:
            connection = mysql.connector.connect(
                host='localhost',
                user='root',
                password='phuc123',
                database='test_db'
            )
            if connection.is_connected():
                cursor = connection.cursor()
                query = """
                    SELECT * FROM DichVu 
                    WHERE `TenDV` LIKE %s OR `Dvt` LIKE %s OR `DonGia` LIKE %s OR `MoTa` LIKE %s
                """
                like_pattern = f"%{search_text}%"
                cursor.execute(query, (like_pattern, like_pattern, like_pattern, like_pattern))
                self.tableWidget.setRowCount(0)
                rows = cursor.fetchall()

                for row_number, row_data in enumerate(rows):
                    self.tableWidget.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                        self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))

        except Error as e:
            QtWidgets.QMessageBox.critical(self.centralwidget, "Error", f"Failed to search records: {e}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
